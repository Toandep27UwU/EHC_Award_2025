from Crypto.Util.number import *

hint1 =  154888122383146971967744398191123189212
hint2 =  130654136341446094800376989317102537325
n =  1291778230841963634710522186531131140292748304311790700929719174642140386189828346122801056721461179519840234314280632436994655344881023892312594913853574461748121277453328656446109784054563731
e =  9397905637403387422411461938505089525132522490010480161341814566119369497062528168320590767152928258571447916140517
c =  482782367816881259357312883356702175242817718119063880833819462767226937212873552015335218158868462980872863563953024168114906381978834311555560455076311389674805493391941801398577027462103318

y = GCD(n,e)
e1 = e // y 
n1 = n // y 
x = 205985756524450894105569840071389752521
z = 212007435030018912792096086712981924541

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    g, y, x = egcd(b % a, a)
    return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, _ = egcd(a, m)
    return x % m

def crt(r1, m1, r2, m2):
    g, s, t = egcd(m1, m2)
    lcm = m1 // g * m2
    inv = modinv(m1 // g, m2 // g)
    t0 = ((r2 - r1) // g * inv) % (m2 // g)
    p = (r1 + t0 * m1) % lcm
    return p

p = crt(hint1, x, hint2, z)+x*z
q = n1 // p 

phi = (p-1)*(q-1)*(y-1)
d = inverse(e,phi)
plain = pow(c,d,n)
plain = long_to_bytes(plain)
print(plain)